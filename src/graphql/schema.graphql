#### Query ####
type Query {

  #  유저
  getAllUser: [User]
  getUserById(id: Int!): User
  existCafeNameInUser(id:Int! cafe_name: String!): User
  getUserByName(name: String!): User

  #  카페
  getAllCafe: [Cafe]
  getCafeByCafeId(cafe_id: Int!): Cafe
  getCafeByOwnerId(owner_id: Int!): [Cafe]
  # 메뉴
  getMenuByCafeId(cafe_id: Int!): Menu_list

  # 비즈니스 앱 운영 관리
  getBizManage: BizManage

  #  리뷰
  getReviewByKey(key: String!): Review

  #  마일리지
  getMileageLogByClientId(client_id: Int!): [MileageLog]

  uploads: [File]

  #  해쉬태그
  getAllHashTag: [HashTag]
  getHashTagById(id: Int!): HashTag
  getHashTagByName(name: String!): HashTag
  getHashTagOverCount(count: Int!): [HashTag]

  # 더미 data
  getDummyData: [Cafe]
}

#### Mutation ####
type Mutation {

  #  유저
  getKakaoUserByJwt(jwt: String!): AuthUser
  authUser: AuthUser
  saveCardToUser(id: Int!, cafe_name: String!, code: String! card_img: String!): User

#  리뷰
  postReview(review: ReviewInput!): PostResponse!

###  Cloud Storage에  업로드  ###
###  Upload 타입은 아폴로 서버에 내장  ###
  uploadImage(content: String!, hash_tag_list: [String], files: [Upload]!): File!

  # 카페
  enrollStaff(cafe_id: Int!, staff_id: Int!, staff_name: String!,  staff_phone: String!, staff_position: String!): Cafe
  shiftStaff(cafe_id: Int!, staff_id: Int!): Cafe
  deleteStaff(cafe_id: Int!, staff_id: Int!): Cafe
  reviseCafeDesc(cafe_id: Int!, introduction: String, beans: String, phone: String): Cafe

  # 마일리지
  saveMileage(cafe_name:String!, menu_name: String!, price: Int!, mileage: Int!, staff_id: Int!, client_id: Int!): MileageLog

  ## 비지니스 (사업자 정보가 승인되기 전에 거치는 보관함)
  saveBusinessDummy(
    location: String,
    owner_id: Int!,
    name: String!,
    phone: String,
    cafe_name: String,
    address: String,
    address_detail: String,
    cafe_phone: String,
    silver: Int,
    gold: Int,
    vip: Int): Cafe
  deleteTempCafe(_id: ID!): Cafe
  enrollCafe(
    location: String,
    owner_id: Int!,
    phone: String,
    cafe_name: String,
    address: String,
    silver: Int,
    gold: Int,
    vip: Int): Cafe
  # 앱 공자시항 관리
  reviseBizManage(_id: ID!, notice: String!): BizManage
  # 메뉴 추가 & 삭제 & 수정
  saveMenu(cafe_id: Int! link: String! menu_name: String! beans: String! price: Int!): Menu_list
  deleteMenu(cafe_id: Int! _id: String!): Menu_list
  reviseMenu(cafe_id: Int! _id: String! link: String! menu_name: String! beans: String! price: Int!): Menu_list
  # 메뉴 카탈로그 추가
  saveMenuTitle(cafe_id: Int! title: [String]!): Menu_list
}

### 유저 ###
### 카카오 프로필 이미지 속성 추가 ###
### 확인후 주석 제거 바랍니다 (21-08-25:지성현) ###

type AuthUser {
  user: User!,
  jwt: String!
}

type User {
  _id: ID,
  id: Int!,
  name: String!,
  email: String!,
  auth: String!,
  point: Int!,
  profile_img: String,
  rating: String!,
  review_count: Int!,
  cafe_list: [QR],
  average_star: Float,
  # 홈 화면 해시태그로 게시물 필터링
  # home_filter_list | home_filter_tag_list
  # 이름 추천 받습니다 (21-09-15:지성현)
  home_tag_list: [String],
  map_tag_list: [String],
}

# 유저 하위 데이터 (소지한 카드 정보) #
type QR {
  cafe_name: String!,
  code: String!,
  card_img: String!,
  visit_times: Int,
}



### 카페 ###
type Cafe {
  _id: ID,
  cafe_id: Int!,
  owner_id: Int!,
  location: Int,
  cafe_info: CafeInfo!,
  discount_rate: CafeDiscountRate!,
  point_fluc: Int!,
  staff: [Staff_data], # (21-9-11수정: 유성현)
}

# 카페 하위 데이터 (카페 정보) #
type CafeInfo {
  cafe_name: String!,
  beans: String,
  location: String!,
  address: String!,
  phone: String!,
  card_img: String!,
  cafe_img: [String],
  like: Int!,
  introduction: String,
}

# 카페 하위 데이터 (등급별 할인율) #
type CafeDiscountRate {
  silver: Int!,
  gold: Int!,
  vip: Int!,
}

# postReview 뮤테이션 인자
input ReviewInput {
  cafe_id: Int,
  content: String!,
  hash_tag_list: [String],
  files: [Upload]!,
}

# review input에서 쓰일 타입
input StarInput {
  flavor: Float!,
  atmosphere: Float!,
  price: Float!,
}

# 카페 하위 데이터 (직원 정보) #  (21-9-11수정:유성현)
type Staff_data {
  staff_id: Int!,
  staff_name: String!,
  staff_phone: String!,
  staff_position: String!,
  enroll: Boolean!,
}

### 카페 메뉴 데이터 ###
type Menu_list {
  _id: ID,
  cafe_id: Int!,
  title: [String],
  menu: [Menu],
}
type Menu {
  _id: ID,
  link: String,
  menu_name: String,
  price: Int,
  beans: String,
}



### 리뷰 ###
type Review {
  review_id: Int!,
  user_name: String!,
  content: String,
  location: String!,
  star: Star!,
  image_list: [String]!,
  like_count: Int,
  comment_list: [Comment],
  hash_tag_list: [String],
  liker_list: [String],
  post_date: String,
}

# 리뷰 하위 데이터 (평점) #
type Star {
  flavor: Float!,
  atmosphere: Float!,
  price: Float!,
}

# 리뷰 하위 데이터 (댓글) #
type Comment {
  user_name: String,
  content: String,
  post_date: String,
}

### 마일리지 로그 ###
type MileageLog {
  date: String!,
  staff_id: Int!,
  client_id: Int!,
  cafe_name: String!,
  menu_name: String!,
  price: Int!,
  mileage: Int!,
  review: String,
  visit_times: Int,
}

type PostResponse {
  success: Boolean!,
  message: String,
}

# apollo 기본 탑재
# 파일 업로드시 필요
scalar Upload

type File {
  filename: String!,
  mimetype: String!,
  encoding: String!,
}

# 오타수정
# (21-09-06)
##############
#  type cafe 삭제

# 해쉬태그
type HashTag {
  id: Int!,
  name: String!,
  count: Int,
}

type BizManage {
  _id: ID,
  notice: String,
}

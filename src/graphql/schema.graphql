#### Query ####
type Query {

  #  유저
  getAllUser: [User]
  getUserById(id: Int!): User
  existCafeNameInUser(id:Int! cafe_name: String!): User

  #  카페
  getAllCafe: [Cafe]
  # getCafeByName(cafe_name: String!): Cafe # 삭제 대기중
  getCafeByCafeId(cafe_id: Int!): Cafe # getCafeByName을 대체할 스키마 (추가21-9-3:유성현)

  #  리뷰
  getReviewByKey(key: String!): Review

  #  마일리지
  getMileageLogByClientId(client_id: Int!): [MileageLog]

  uploads: [File]
}

#### Mutation ####
type Mutation {

  #  유저
  getKakaoUserByJwt(jwt: String!): User
  authUser: User
  saveCardToUser(id: Int!, cafe_name: String!, code: String! card_img: String!): User

#  리뷰
  postReview(review: ReviewInput!): Boolean

###  Cloud Storage에  업로드  ###
###  Upload 타입은 아폴로 서버에 내장  ###
  uploadImage(content: String!, hash_tag_list: [String], files: [Upload]!): File!

  # 카페
  enrollStaff(cafe_id: Int!, staff_id: Int!, staff_name: String!,  staff_phone: String!, staff_position: String!): Cafe
  shiftStaff(cafe_id: Int!, staff_id: Int!, staff_name: String!,  staff_phone: String!, staff_position: String!): Cafe

  # 마일리지
  saveMileage(cafe_name:String!, menu_name: String!, price: Int!, mileage: Int!, staff_id: Int!, client_id: Int!): MileageLog
}

### 유저 ###
### 카카오 프로필 이미지 속성 추가 ###
### 확인후 주석 제거 바랍니다 (21-08-25:지성현) ###
type User {
  id: Int!,
  name: String!,
  email: String!,
  auth: String!,
  point: Int!,
  profile_img: String,
  rating: String!,
  review_count: Int!,
  cafe_list: [QR],
  average_star: Float,
}

# 유저 하위 데이터 (소지한 카드 정보) #
type QR {
  cafe_name: String!,
  code: String!,
  card_img: String!,
  visit_times: Int,
}



### 카페 ###
type Cafe {
  cafe_id: Int!,
  owner_id: Int!,
  cafe_info: CafeInfo!,
  discount_rate: CafeDiscountRate!,
  point_fluc: Int!,
  # staff항목 추가 // 현재 직원, 승인 대기중인 직원 등록 (21-8-31추가:유성현)
  curr_staff: [Staff_data], # 근무중인 사업자 및 직원
  enroll_staff: [Staff_data], # 등록 대기중인 사업자 및 직원
}

# 카페 하위 데이터 (카페 정보) #
type CafeInfo {
  cafe_name: String!,
  beans: String,
  position: String!,
  address: String!,
  phone: String!,
  card_img: String!,
  # 카페 정보에 사용될 카페 이미지 (owner가 직접 등록하는 사진 21-8-31추가:유성현)
  cafe_img: [String],
  like: Int!,
}

# 카페 하위 데이터 (등급별 할인율) #
type CafeDiscountRate {
  silver: Int!,
  gold: Int!,
  vip: Int!,
}

# postReview 뮤테이션 인자
input ReviewInput {
  content: String!,
  hash_tag_list: [String],
  files: [Upload]!,
}

# review input에서 쓰일 타입
input StarInput {
  flavor: Float!,
  atmosphere: Float!,
  price: Float!,
}
# 카페 하위 데이터 (직원 정보) #  (21-8-31추가:유성현)
type Staff_data {
  staff_id: Int!,
  staff_name: String!,
  staff_phone: String!,
  staff_position: String!,
}




### 리뷰 ###
type Review {
  review_id: Int!,
  user_name: String!,
  content: String,
  location: String!,
  star: Star!,  
  image_list: [String]!,
  like_count: Int,
  comment_list: [Comment],
  hash_tag_list: [String],
  liker_list: [String],
  post_date: String,
}

# 리뷰 하위 데이터 (평점) #
type Star {
  flavor: Float!,
  atmosphere: Float!,
  price: Float!,
}

# 리뷰 하위 데이터 (댓글) #
type Comment {
  user_name: String,
  content: String,
  post_date: String,
}

### 마일리지 로그 ###
type MileageLog {
  date: String!,
  staff_id: Int!,
  client_id: Int!,
  cafe_name: String!,
  menu_name: String!,
  price: Int!,
  mileage: Int!,
  review: String,
  visit_times: Int,
}

# apollo 기본 탑재
# 파일 업로드시 필요
scalar Upload

type File {
  filename: String!,
  mimetype: String!,
  encoding: String!,
}

type cafe {
  id: Int,
  cafe_name: String,
  cafe_info: String,
  bean_info: String,
  point_fluctuation: Int,
  discount_reate: Int

}

